# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/development/cicd/templates/
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

image: gradle:jdk17-alpine

services:
  - name: docker:dind
    alias: docker
    command: [ "--tls=false" ]

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: unix:///var/run/docker.sock
  TESTCONTAINERS_HOST_OVERRIDE: "host.docker.internal"
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
  GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  IMAGE_NAME: "service-movie-management"
  REGISTRY: "registry.gitlab.com/cinema7590904"

stages:          # List of stages for jobs, and their order of execution
  #  - build
  #  - test
  #  - sonar
  #  - publish
  - dependency_scan
#  - deploy

#build:
#  stage: build
#  script:
#    - gradle --build-cache assemble
#  cache:
#    key: "$CI_COMMIT_REF_NAME"
#    policy: push
#    paths:
#      - build
#      - .gradle
#  artifacts:
#    paths:
#      - build/libs/service-movie-management-0.0.1-SNAPSHOT.jar
#    expire_in: 1 day
#
#test:
#  stage: test
#  script: gradle check
#  cache:
#    key: "$CI_COMMIT_REF_NAME"
#    policy: pull
#    paths:
#      - build
#      - .gradle
#  dependencies:
#    - build
#  artifacts:
#    reports:
#      junit: build/test-results/test/**/TEST-*.xml
#      coverage_report:
#        coverage_format: cobertura
#        path: build/reports/jacoco/test/jacocoTestReport.xml
#    paths:
#      - build/reports/jacoco/test/jacocoTestReport.xml
#  coverage: '/Total.*?([0-9,.]{1,5})%/'
#
#sonarcloud-check:
#  stage: sonar
#  cache:
#    key: "${CI_JOB_NAME}"
#    paths:
#      - .sonar/cache
#  script: gradle sonar
#  allow_failure: true
#  rules:
#    - if: '$CI_COMMIT_BRANCH == "master"'
#    - if: '$CI_COMMIT_BRANCH != "master" && $CI_PIPELINE_SOURCE != "merge_request_event"'
#      when: manual
#    - when: never
#
#publish:
#  stage: publish
#  before_script:
#    - apk add --no-cache docker
#    - docker version
#    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $REGISTRY
#    - IMAGE_TAG=${CI_COMMIT_REF_SLUG}
#  script:
#    - ls -la build/libs/
#    - docker build -t $REGISTRY/$IMAGE_NAME:$IMAGE_TAG .
#    - docker push $REGISTRY/$IMAGE_NAME:$IMAGE_TAG
#  dependencies:
#    - build
#  artifacts:
#    paths:
#      - build/libs/*.jar

trivy_scan_vulnerabilities:
  stage: dependency_scan
  image:
    name: aquasec/trivy:latest
    entrypoint: [ "" ]
  variables:
    IMAGE_FULL: "$REGISTRY/$IMAGE_NAME:${CI_COMMIT_REF_SLUG}"
    REPORT_FILE: trivy-scan-report.json
  before_script:
    - apk add --no-cache docker-cli
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin "$REGISTRY"
  script:
    - docker pull "${IMAGE_FULL}"
    - trivy image --scanners vuln  "${IMAGE_FULL}" --output $REPORT_FILE  --no-progress --format template --template "@contrib/gitlab.tpl" --exit-code 1
    - ls -lah .
  artifacts:
    reports:
      container_scanning: $REPORT_FILE
    paths:
      - $REPORT_FILE
    expire_in: 7 days
  allow_failure: true

#.deploy_base:
#  services: [ ]
#  tags:
#    - minikube
#  stage: deploy
#  when: manual
#  image: alpine:latest
#  before_script:
#    - apk update
#    - apk add curl bash
#    - curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | VERIFY_CHECKSUM=false bash
#    - echo "$KUBECONFIG_CLUSTER" > kubeconfig.yaml
#    - export KUBECONFIG=$(pwd)/kubeconfig.yaml
#  script:
#    - helm version
#    - helm upgrade --install springboot-app-movie ./ops/springboot-app --set image.tag=${CI_COMMIT_REF_SLUG} -f ./ops/springboot-app/values.yaml -f "$CLUSTER_VALUES_FILE" --debug
#
#deploy_kind:
#  tags:
#    - k8s_docker
#  extends: .deploy_base
#  variables:
#    KUBECONFIG_CLUSTER: "$KUBECONFIG_CONTENT_K8SinDD"
#    CLUSTER_VALUES_FILE: "./ops/springboot-app/values-kind.yaml"
#
#deploy_minikube:
#  tags:
#    - minikube
#  extends: .deploy_base
#  variables:
#    KUBECONFIG_CLUSTER: "$KUBECONFIG_CONTENT"
#    CLUSTER_VALUES_FILE: "./ops/springboot-app/values-minikube.yaml"