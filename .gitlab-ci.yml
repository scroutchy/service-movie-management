# You can override the included template(s) by including variable overrides
# SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# Secret Detection customization: https://docs.gitlab.com/user/application_security/secret_detection/pipeline/configure
# Dependency Scanning customization: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#customizing-the-dependency-scanning-settings
# Container Scanning customization: https://docs.gitlab.com/ee/user/application_security/container_scanning/#customizing-the-container-scanning-settings
# Note that environment variables can be set in several places
# See https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence

# container_scanning:
#   variables:
#     DOCKER_IMAGE: ...
#     DOCKER_USER: ...
#     DOCKER_PASSWORD: ...
image: gradle:jdk17-alpine
services:
- name: docker:dind
  alias: docker
  command:
  - "--tls=false"
variables:
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: unix:///var/run/docker.sock
  TESTCONTAINERS_HOST_OVERRIDE: host.docker.internal
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
  GIT_DEPTH: '0'
  IMAGE_NAME: service-movie-management
  REGISTRY: registry.gitlab.com/cinema7590904
stages:
- build
- test
- sonar
- publish
- deploy
build:
  stage: build
  script:
  - gradle --build-cache assemble
  cache:
    key: "$CI_COMMIT_REF_NAME"
    policy: push
    paths:
    - build
    - ".gradle"
  artifacts:
    paths:
    - build/libs/service-movie-management-0.0.1-SNAPSHOT.jar
    expire_in: 1 day
test:
  stage: test
  script: gradle check
  cache:
    key: "$CI_COMMIT_REF_NAME"
    policy: pull
    paths:
    - build
    - ".gradle"
  dependencies:
  - build
  artifacts:
    reports:
      junit: build/test-results/test/**/TEST-*.xml
      coverage_report:
        coverage_format: cobertura
        path: build/reports/jacoco/test/jacocoTestReport.xml
    paths:
    - build/reports/jacoco/test/jacocoTestReport.xml
  coverage: "/Total.*?([0-9,.]{1,5})%/"
sonarcloud-check:
  stage: sonar
  cache:
    key: "${CI_JOB_NAME}"
    paths:
    - ".sonar/cache"
  script: gradle sonar
  allow_failure: true
  rules:
  - if: $CI_COMMIT_BRANCH == "master"
  - if: $CI_COMMIT_BRANCH != "master" && $CI_PIPELINE_SOURCE != "merge_request_event"
    when: manual
  - when: never
publish:
  stage: publish
  before_script:
  - apk add --no-cache docker
  - docker version
  - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin
    $REGISTRY
  - IMAGE_TAG=${CI_COMMIT_REF_SLUG}
  script:
  - ls -la build/libs/
  - docker build -t $REGISTRY/$IMAGE_NAME:$IMAGE_TAG .
  - docker push $REGISTRY/$IMAGE_NAME:$IMAGE_TAG
  dependencies:
  - build
  artifacts:
    paths:
    - build/libs/*.jar
".deploy_base":
  services: []
  tags:
  - minikube
  stage: deploy
  when: manual
  image: alpine:latest
  before_script:
  - apk update
  - apk add curl bash
  - curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | VERIFY_CHECKSUM=false
    bash
  - echo "$KUBECONFIG_CLUSTER" > kubeconfig.yaml
  - export KUBECONFIG=$(pwd)/kubeconfig.yaml
  script:
  - helm version
  - helm upgrade --install springboot-app-movie ./ops/springboot-app --set image.tag=${CI_COMMIT_REF_SLUG}
    -f ./ops/springboot-app/values.yaml -f "$CLUSTER_VALUES_FILE" --debug
deploy_kind:
  tags:
  - k8s_docker
  extends: ".deploy_base"
  variables:
    KUBECONFIG_CLUSTER: "$KUBECONFIG_CONTENT_K8SinDD"
    CLUSTER_VALUES_FILE: "./ops/springboot-app/values-kind.yaml"
deploy_minikube:
  tags:
  - minikube
  extends: ".deploy_base"
  variables:
    KUBECONFIG_CLUSTER: "$KUBECONFIG_CONTENT"
    CLUSTER_VALUES_FILE: "./ops/springboot-app/values-minikube.yaml"
include:
- template: Jobs/Container-Scanning.gitlab-ci.yml
